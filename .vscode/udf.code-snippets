{
  "ss": {
    "prefix": "ss",
    "body": "showLoading();"
  },
  "slt": {
    "prefix": "slt",
    "body": "loading = true;\nsetState((){});"
  },
  "slf": {
    "prefix": "slf",
    "body": "loading = false;\nsetState((){});"
  },
  "hl": {
    "prefix": "hl",
    "body": "hideLoading();"
  },
  "class_validator": {
    "prefix": "class_validator",
    "body": "class Validator {\nstatic String? rule(\nString? value, {\nbool required = false,\n}) {\nif (required && value!.isEmpty) {\nreturn 'This field is required';\n}\nreturn null;\n}\n\nstatic String? required(\ndynamic value, {\nString? fieldName,\n}) {\nif (value == null) {\nreturn 'This field is required';\n}\n\nif (value is String || value == null) {\nif (value.toString() == 'null') return 'This field is required';\nif (value.isEmpty) return 'This field is required';\n}\n\nif (value is List) {\nif (value.isEmpty) return 'This field is required';\n}\nreturn null;\n}\n\nstatic String? email(String? value) {\nif (value!.isEmpty) return 'This field is required';\n\nfinal isValidEmail = RegExp(\nr\"^[a-zA-Z0-9.a-zA-Z0-9.!#$%&'*+-/=?^_`{|}~]+@[a-zA-Z0-9]+.[a-zA-Z]+\",\n).hasMatch(value);\n\nif (!isValidEmail) {\nreturn 'This field is not in a valid email format';\n}\nreturn null;\n}\n\nstatic String? number(String? value) {\nif (value!.isEmpty) return 'This field is required';\n\nfinal isNumber = RegExp(r'^[0-9]+$').hasMatch(value);\nif (!isNumber) {\nreturn 'This field is not in a valid number format';\n}\nreturn null;\n}\n\nstatic String? atLeastOneitem(List<Map<String, dynamic>> items) {\nfinal checkedItems = items.where((i) => i['checked'] == true).toList();\nif (checkedItems.isEmpty) {\nreturn 'you must choose at least one item';\n}\nreturn null;\n}\n}"
  },
  "reuseable_card": {
    "prefix": "reuseable_card",
    "body": "// ignore_for_file: camel_case_types, prefer_typing_uninitialized_variables\n\nimport 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass QCard extends StatelessWidget {\nQCard({\nrequired this.children,\nsuper.key,\nthis.title,\nthis.subtitle,\nthis.padding,\nthis.actions = const [],\n});\nfinal String? title;\nfinal String? subtitle;\nfinal EdgeInsetsGeometry? padding;\nfinal List<Widget> children;\nfinal List<Widget> actions;\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nclipBehavior: Clip.hardEdge,\ndecoration: BoxDecoration(\ncolor: Colors.white,\nborderRadius: BorderRadius.all(\nRadius.circular(\n12,\n),\n),\nborder: Border.all(\nwidth: 1.0,\ncolor: Colors.grey[300]!,\n),\nboxShadow: [\nBoxShadow(\ncolor: Colors.grey[300]!,\nblurRadius: 12,\noffset: Offset(0, 11),\n),\n],\n),\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nif (title != null) ...[\nContainer(\ndecoration: BoxDecoration(\ncolor: Colors.white,\n),\npadding: EdgeInsets.all(12),\nchild: Row(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nExpanded(\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nText(\n'$title',\nstyle: TextStyle(\nfontSize: 16,\nfontWeight: FontWeight.bold,\n),\n),\nif (subtitle != null)\nText(\n'$subtitle',\nstyle: TextStyle(\nfontSize: 12,\ncolor: Colors.white,\n),\n),\n],\n),\n),\nif (actions.isNotEmpty)\nSizedBox(\nheight: 32,\nchild: Row(\nchildren: actions,\n),\n),\n],\n),\n),\nDivider(\ncolor: Colors.grey[200],\nheight: 1,\n),\n],\nContainer(\npadding: padding ?? EdgeInsets.all(20),\ndecoration: BoxDecoration(\ncolor: Colors.white,\n),\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: children,\n),\n),\n],\n),\n);\n}\n}\n"
  },
  "reuseable_carousel": {
    "prefix": "reuseable_carousel",
    "body": "import 'package:carousel_slider/carousel_slider.dart';\nimport 'package:flutter/material.dart';\nimport 'package:hyper_ui/shared/theme/theme_config.dart';\n\nenum CarouselType {\ntype1,\ntype2,\ntype3,\ntype4,\ntype5,\n}\n\nclass QCarousel extends StatefulWidget {\nconst QCarousel({\nrequired this.images,\nsuper.key,\nthis.type = CarouselType.type1,\n});\nfinal List images;\nfinal CarouselType type;\n@override\nState<QCarousel> createState() => _QCarouselState();\n}\n\nclass _QCarouselState extends State<QCarousel> {\nint currentIndex = 0;\nfinal CarouselController carouselController = CarouselController();\n@override\nWidget build(BuildContext context) {\nreturn Column(\nchildren: [\nif (widget.type == CarouselType.type1)\nBuilder(\nbuilder: (context) {\nreturn CarouselSlider(\noptions: CarouselOptions(\nheight: 160,\nautoPlay: true,\nenlargeCenterPage: true,\n),\nitems: widget.images.map((imageUrl) {\nreturn Builder(\nbuilder: (BuildContext context) {\nreturn Container(\nwidth: MediaQuery.of(context).size.width,\nmargin: const EdgeInsets.symmetric(horizontal: 5),\ndecoration: BoxDecoration(\ncolor: Colors.amber,\nborderRadius: const BorderRadius.all(\nRadius.circular(6),\n),\nimage: DecorationImage(\nimage: NetworkImage(\nimageUrl,\n),\nfit: BoxFit.cover,\n),\n),\n);\n},\n);\n}).toList(),\n);\n},\n),\nif (widget.type == CarouselType.type2)\nBuilder(\nbuilder: (context) {\nreturn CarouselSlider(\noptions: CarouselOptions(\nheight: 160,\nautoPlay: true,\naspectRatio: 1,\nenlargeFactor: 1,\nviewportFraction: 1,\nclipBehavior: Clip.none,\n),\nitems: widget.images.map((imageUrl) {\nreturn Builder(\nbuilder: (BuildContext context) {\nreturn Container(\nwidth: MediaQuery.of(context).size.width,\nmargin: const EdgeInsets.symmetric(horizontal: 5),\ndecoration: BoxDecoration(\ncolor: Colors.amber,\nborderRadius: const BorderRadius.all(\nRadius.circular(6),\n),\nimage: DecorationImage(\nimage: NetworkImage(\nimageUrl,\n),\nfit: BoxFit.cover,\n),\n),\n);\n},\n);\n}).toList(),\n);\n},\n),\nif (widget.type == CarouselType.type3)\nBuilder(\nbuilder: (context) {\nreturn CarouselSlider(\noptions: CarouselOptions(\nscrollDirection: Axis.vertical,\nheight: 160,\nautoPlay: true,\nenlargeCenterPage: true,\n),\nitems: widget.images.map((imageUrl) {\nreturn Builder(\nbuilder: (BuildContext context) {\nreturn Container(\nheight: MediaQuery.of(context).size.height,\nmargin: const EdgeInsets.symmetric(vertical: 5),\ndecoration: BoxDecoration(\ncolor: Colors.amber,\nborderRadius: const BorderRadius.all(\nRadius.circular(6),\n),\nimage: DecorationImage(\nimage: NetworkImage(\nimageUrl,\n),\nfit: BoxFit.cover,\n),\n),\n);\n},\n);\n}).toList(),\n);\n},\n),\nif (widget.type == CarouselType.type4)\nBuilder(\nbuilder: (context) {\nreturn Column(\nchildren: [\nCarouselSlider(\ncarouselController: carouselController,\noptions: CarouselOptions(\nheight: 160,\nautoPlay: true,\nenlargeCenterPage: true,\nonPageChanged: (index, reason) {\ncurrentIndex = index;\nsetState(() {});\n},\n),\nitems: widget.images.map((imageUrl) {\nreturn Builder(\nbuilder: (BuildContext context) {\nreturn Container(\nwidth: MediaQuery.of(context).size.width,\nmargin: const EdgeInsets.symmetric(horizontal: 5),\ndecoration: BoxDecoration(\ncolor: Colors.amber,\nborderRadius: const BorderRadius.all(\nRadius.circular(6),\n),\nimage: DecorationImage(\nimage: NetworkImage(\nimageUrl,\n),\nfit: BoxFit.cover,\n),\n),\n);\n},\n);\n}).toList(),\n),\nRow(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: widget.images.asMap().entries.map((entry) {\nreturn GestureDetector(\nonTap: () =>\ncarouselController.animateToPage(entry.key),\nchild: Container(\nwidth: 12,\nheight: 12,\nmargin: const EdgeInsets.symmetric(\nvertical: 8,\nhorizontal: 4,\n),\ndecoration: BoxDecoration(\nshape: BoxShape.circle,\ncolor:\n(Theme.of(context).brightness == Brightness.dark\n? primaryColor\n: primaryColor.withOpacity(\n0.6,\n))\n.withOpacity(\ncurrentIndex == entry.key ? 0.9 : 0.4,\n),\n),\n),\n);\n}).toList(),\n),\n],\n);\n},\n),\nif (widget.type == CarouselType.type5)\nBuilder(\nbuilder: (context) {\nreturn Column(\nchildren: [\nCarouselSlider(\ncarouselController: carouselController,\noptions: CarouselOptions(\nheight: 160,\nautoPlay: true,\nviewportFraction: 1,\nonPageChanged: (index, reason) {\ncurrentIndex = index;\nsetState(() {});\n},\n),\nitems: widget.images.map((imageUrl) {\nreturn Builder(\nbuilder: (BuildContext context) {\nreturn Container(\nwidth: MediaQuery.of(context).size.width,\nmargin: const EdgeInsets.symmetric(horizontal: 5),\ndecoration: BoxDecoration(\ncolor: Colors.amber,\nborderRadius: const BorderRadius.all(\nRadius.circular(6),\n),\nimage: DecorationImage(\nimage: NetworkImage(\nimageUrl,\n),\nfit: BoxFit.cover,\n),\n),\n);\n},\n);\n}).toList(),\n),\nRow(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: widget.images.asMap().entries.map((entry) {\nfinal isSelected = currentIndex == entry.key;\nreturn GestureDetector(\nonTap: () =>\ncarouselController.animateToPage(entry.key),\nchild: Container(\nwidth: isSelected ? 40 : 6.0,\nheight: 6,\nmargin: const EdgeInsets.only(\nright: 6,\ntop: 12,\n),\ndecoration: BoxDecoration(\ncolor: isSelected\n? primaryColor\n: primaryColor.withOpacity(0.6),\nborderRadius: const BorderRadius.all(\nRadius.circular(12),\n),\n),\n),\n);\n}).toList(),\n),\n],\n);\n},\n),\n],\n);\n}\n}\n"
  },
  "dio_detail": {
    "prefix": "dio_detail",
    "body": "QDetailView(\nendpoint: \"articles\",\nid: \"1\",\nitemBuilder: (detail) {\n// Your detail here\n}\n),"
  },
  "dio_list": {
    "prefix": "dio_list",
    "body": "QListView(\nendpoint: \"articles\",\nitemBuilder: (item, index) {\n// Your list item here\n}\n),"
  },
  "reuseable_auto_complete": {
    "prefix": "reuseable_auto_complete",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass QAutoComplete extends StatefulWidget {\nconst QAutoComplete({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.items = const [],\nthis.onFuture,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.value,\nthis.enabled = true,\n});\nfinal String label;\nfinal String? hint;\nfinal String? helper;\nfinal dynamic value;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(String? item)? validator;\nfinal Function(dynamic value, String? label) onChanged;\nfinal Function()? onFuture;\nfinal bool enabled;\n\n@override\nState<QAutoComplete> createState() => _QAutoCompleteState();\n}\n\nclass _QAutoCompleteState extends State<QAutoComplete> {\nList<Map<String, dynamic>> items = [];\n\n@override\nvoid initState() {\nsuper.initState();\n\nif (widget.onFuture == null) {\nfor (final item in widget.items) {\nitems.add(Map.from(item));\n}\n} else {\nloadData();\n}\n}\n\nloadData() async {\nfinal List<Map<String, dynamic>> serviceItems = await widget.onFuture!();\nfor (final item in serviceItems) {\nitems.add(item);\n}\nsetState(() {});\n}\n\nbool get hasValue {\nvar val = widget.value;\nvar index =\nitems.indexWhere((i) => i[\"value\"].toString() == val.toString());\nreturn index > -1;\n}\n\nString get getLabelFromCurrentValue {\nvar val = widget.value;\nreturn items\n.firstWhere((i) => i[\"value\"].toString() == val.toString())['label']\n.toString();\n}\n\n@override\nWidget build(BuildContext context) {\nif (items.isEmpty) return Container();\n\nreturn LayoutBuilder(\nbuilder: (context, constraints) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: FormField(\ninitialValue: false,\nbuilder: (field) {\nreturn Autocomplete<Map>(\ninitialValue: !hasValue || widget.value == null\n? null\n: TextEditingValue(\ntext: getLabelFromCurrentValue,\n),\nfieldViewBuilder: (\ncontext,\ntextEditingController,\nfocusNode,\nonFieldSubmitted,\n) {\nreturn Container(\nchild: TextFormField(\ncontroller: textEditingController,\nfocusNode: focusNode,\nonFieldSubmitted: (text) => onFieldSubmitted(),\nvalidator: widget.validator,\nenabled: widget.enabled,\ndecoration: InputDecoration(\nlabelText: \"${widget.label}\",\nerrorText: field.errorText,\nsuffixIcon: Container(\nwidth: 70.0,\nchild: Row(\nmainAxisAlignment: MainAxisAlignment.end,\ncrossAxisAlignment: CrossAxisAlignment.center,\nchildren: [\nInkWell(\nonTap: () {\ntextEditingController.clear();\nwidget.onChanged(null, null);\n},\nchild: Icon(Icons.close),\n),\nconst SizedBox(\nwidth: 8.0,\n),\nIcon(Icons.search),\nconst SizedBox(\nwidth: 8.0,\n),\n],\n),\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\n),\n);\n},\nonSelected: (Map map) {\nfinal String? label = map['label']?.toString();\nfinal dynamic value = map['value'];\nwidget.onChanged(value, label);\n},\noptionsBuilder: (TextEditingValue textEditingValue) {\nif (textEditingValue.text == '') {\nreturn const Iterable<Map>.empty();\n}\nreturn items.where((Map option) {\nreturn option['label']\n.toString()\n.toLowerCase()\n.contains(textEditingValue.text.toLowerCase());\n});\n},\ndisplayStringForOption: (option) {\nreturn option['label'].toString();\n},\noptionsViewBuilder: (context, onSelected, options) => Align(\nalignment: Alignment.topLeft,\nchild: Material(\ncolor: Colors.transparent,\nchild: ClipRRect(\nclipBehavior: Clip.none,\nborderRadius: const BorderRadius.vertical(\nbottom: Radius.circular(12),\n),\nchild: Container(\nwidth: constraints.biggest.width,\nmargin: const EdgeInsets.only(top: 10),\nchild: Wrap(\nchildren: [\nContainer(\nclipBehavior: Clip.antiAlias,\ndecoration: BoxDecoration(\ncolor: Theme.of(Get.currentContext!)\n.scaffoldBackgroundColor,\nborderRadius: const BorderRadius.all(\nRadius.circular(12),\n),\nborder: Border.all(\ncolor: primaryColor,\n),\n),\nchild: ListView.builder(\npadding: EdgeInsets.zero,\nitemCount: options.length,\nshrinkWrap: true,\nitemBuilder: (BuildContext context, int index) {\nfinal selected =\nAutocompleteHighlightedOption.of(\ncontext,\n) ==\nindex;\nfinal option = options.elementAt(index);\n\nreturn InkWell(\nfocusColor: Colors.transparent,\nhoverColor: Colors.transparent,\nhighlightColor: Colors.transparent,\nonTap: () => onSelected(option),\nchild: Container(\ndecoration: BoxDecoration(\ncolor: selected\n? Theme.of(context).focusColor\n: null,\nborderRadius: BorderRadius.only(\ntopLeft: Radius.circular(\nindex == 0 ? 12 : 0,\n),\ntopRight: Radius.circular(\nindex == 0 ? 12 : 0,\n),\nbottomLeft: Radius.circular(\nindex == options.length - 1\n? 12\n: 0.0,\n),\nbottomRight: Radius.circular(\nindex == options.length - 1\n? 12\n: 0.0,\n),\n),\n),\nchild: ListTile(\nleading: option['photo'] == null\n? null\n: CircleAvatar(\nbackgroundImage: NetworkImage(\noption['photo'],\n),\n),\ntitle: Text(\"${option[\"label\"]}\"),\nsubtitle: option['info'] == null\n? null\n: Text(\"${option[\"info\"]}\"),\n),\n),\n);\n},\n),\n),\n],\n),\n),\n),\n),\n),\n);\n},\n),\n);\n},\n);\n}\n}\n"
  },
  "reuseable_action_button": {
    "prefix": "reuseable_action_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass QActionButton extends StatelessWidget {\nconst QActionButton({\nrequired this.label,\nrequired this.onPressed,\nsuper.key,\nthis.icon,\nthis.color,\nthis.enabled = true,\n});\nfinal String label;\nfinal Function onPressed;\nfinal Color? color;\nfinal IconData? icon;\nfinal bool enabled;\n\n@override\nWidget build(BuildContext context) {\nconst padding = 12.0;\n\nreturn Container(\npadding: const EdgeInsets.all(padding),\ncolor: Colors.white,\nwidth: MediaQuery.of(context).size.width,\nchild: Wrap(\nchildren: [\nQButton(\nlabel: label,\nicon: icon,\nenabled: enabled,\nonPressed: onPressed,\n),\n],\n),\n);\n}\n}\n"
  },
  "reuseable_action_button_with_options": {
    "prefix": "reuseable_action_button_with_options",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass QActionButtonWithOptions extends StatelessWidget {\nconst QActionButtonWithOptions({\nrequired this.label,\nrequired this.icon,\nrequired this.onPressed,\nrequired this.onOptionPressed,\nsuper.key,\n});\nfinal String label;\nfinal IconData icon;\nfinal Function onPressed;\nfinal Function onOptionPressed;\n\n@override\nWidget build(BuildContext context) {\nconst padding = 20.0;\nreturn Container(\npadding: const EdgeInsets.all(padding),\nheight: 48 + (padding * 2),\nchild: Row(\nchildren: [\nExpanded(\nchild: SizedBox(\nheight: 48,\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: primaryColor,\n),\nonPressed: () => onPressed(),\nchild: Text(\nlabel,\nstyle: const TextStyle(\nfontSize: 16,\n),\n),\n),\n),\n),\nconst SizedBox(\nwidth: 16,\n),\nSizedBox(\nwidth: 68,\nheight: 48,\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: const Color(0xffe8e8e8),\nforegroundColor: const Color(0xff545d58),\n),\nonPressed: () {\nif (tapProtected) return;\nonOptionPressed();\n},\nchild: Icon(\nicon,\nsize: 24,\n),\n),\n),\n],\n),\n);\n}\n}\n"
  },
  "reuseable_button": {
    "prefix": "reuseable_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass QButton extends StatefulWidget {\nconst QButton({\nrequired this.label,\nrequired this.onPressed,\nsuper.key,\nthis.width,\nthis.height,\nthis.icon,\nthis.sufixIcon,\nthis.color,\nthis.spaceBetween = false,\nthis.size = ThemeSize.md,\nthis.fontSize,\nthis.enabled = true,\n});\nfinal String label;\nfinal Function onPressed;\nfinal double? width;\nfinal double? height;\nfinal IconData? icon;\nfinal IconData? sufixIcon;\nfinal Color? color;\nfinal bool spaceBetween;\nfinal ThemeSize size;\nfinal double? fontSize;\nfinal bool enabled;\n\n@override\nState<QButton> createState() => _QButtonState();\n}\n\nclass _QButtonState extends State<QButton> {\nDateTime? lastTap;\n\n@override\nWidget build(BuildContext context) {\nvar widgetWidth = widget.width ?? MediaQuery.of(context).size.width;\nvar widgetHeight = 46.0;\nvar widgetFontSize = 16.0;\nvar widgetIconSize = 24.0;\n\nwidgetWidth *= widget.size.scaleFactor;\nwidgetHeight *= widget.size.scaleFactor;\nwidgetFontSize *= widget.size.scaleFactor;\nwidgetIconSize *= widget.size.scaleFactor;\n\nwidgetHeight = widget.height ?? widgetHeight;\n\nreturn SizedBox(\nwidth: widgetWidth,\nheight: widgetHeight,\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\nbackgroundColor:\nwidget.enabled ? (widget.color ?? primaryColor) : disabledColor,\n),\nonPressed: () {\nif (tapProtected) return;\nwidget.enabled ? widget.onPressed() : {};\n},\nchild: Row(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nif (widget.icon != null) ...[\nIcon(\nwidget.icon,\nsize: widgetIconSize,\ncolor: Colors.white,\n),\nconst SizedBox(\nwidth: 6,\n),\n],\nif (widget.spaceBetween && widget.icon != null) const Spacer(),\nif (widget.icon == null)\nExpanded(\nchild: Text(\nwidget.label,\noverflow: TextOverflow.ellipsis,\ntextAlign: TextAlign.center,\nstyle: TextStyle(\nfontSize: widget.fontSize ?? widgetFontSize,\ncolor: Colors.white,\n),\n),\n),\nif (widget.icon != null)\nText(\nwidget.label,\noverflow: TextOverflow.ellipsis,\ntextAlign: TextAlign.center,\nstyle: TextStyle(\nfontSize: widget.fontSize ?? widgetFontSize,\ncolor: Colors.white,\n),\n),\nif (widget.spaceBetween && widget.sufixIcon != null) const Spacer(),\nif (widget.sufixIcon != null) ...[\nIcon(\nwidget.sufixIcon,\nsize: widgetIconSize,\ncolor: Colors.white,\n),\nconst SizedBox(\nwidth: 6,\n),\n],\n],\n),\n),\n);\n}\n}\n"
  },
  "reuseable_outline_button": {
    "prefix": "reuseable_outline_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/shared/theme/theme_config.dart';\nimport 'package:hyper_ui/shared/util/tap_handler/tap_handler.dart';\n\nclass QOutlineButton extends StatelessWidget {\nconst QOutlineButton({\nrequired this.label,\nrequired this.onPressed,\nsuper.key,\nthis.width,\n});\nfinal String label;\nfinal Function onPressed;\nfinal double? width;\n\n@override\nWidget build(BuildContext context) {\nreturn SizedBox(\nwidth: width ?? MediaQuery.of(context).size.width,\nheight: 48,\nchild: OutlinedButton(\nstyle: OutlinedButton.styleFrom(\nforegroundColor: Colors.green,\nside: BorderSide(\ncolor: primaryColor,\nwidth: 2,\n),\n),\nonPressed: () {\nif (tapProtected) return;\nonPressed();\n},\nchild: Text(\nlabel,\nstyle: TextStyle(\nfontSize: 16,\ncolor: primaryColor,\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_outline_danger_button": {
    "prefix": "reuseable_outline_danger_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/shared/util/tap_handler/tap_handler.dart';\n\nclass QOutlineDangerButton extends StatelessWidget {\nconst QOutlineDangerButton({\nrequired this.label,\nrequired this.onPressed,\nsuper.key,\nthis.width,\n});\nfinal String label;\nfinal Function onPressed;\nfinal double? width;\n\n@override\nWidget build(BuildContext context) {\nreturn SizedBox(\nwidth: width ?? MediaQuery.of(context).size.width,\nheight: 48,\nchild: OutlinedButton(\nstyle: OutlinedButton.styleFrom(\nforegroundColor: Colors.red,\nside: const BorderSide(\ncolor: Colors.red,\n),\n),\nonPressed: () {\nif (tapProtected) return;\nonPressed();\n},\nchild: Text(\nlabel,\nstyle: const TextStyle(\nfontSize: 16,\ncolor: Colors.red,\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_outline_icon_button": {
    "prefix": "reuseable_outline_icon_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/shared/util/tap_handler/tap_handler.dart';\n\nclass QOutlineIconButton extends StatelessWidget {\nconst QOutlineIconButton({\nrequired this.label,\nrequired this.icon,\nrequired this.onPressed,\nsuper.key,\nthis.width,\n});\nfinal String label;\nfinal IconData icon;\nfinal Function onPressed;\nfinal double? width;\n\n@override\nWidget build(BuildContext context) {\nreturn SizedBox(\nwidth: width ?? MediaQuery.of(context).size.width,\nheight: 48,\nchild: OutlinedButton.icon(\nicon: Icon(\nicon,\ncolor: const Color(0xff434d48),\n),\nlabel: Text(\nlabel,\nstyle: const TextStyle(\nfontSize: 16,\ncolor: Color(0xff434d48),\n),\n),\nstyle: OutlinedButton.styleFrom(\nforegroundColor: Colors.green,\nside: const BorderSide(\ncolor: Color(0xffd9dbd9),\n),\n),\nonPressed: () {\nif (tapProtected) return;\nonPressed();\n},\n),\n);\n}\n}\n"
  },
  "reuseable_outline_success_button": {
    "prefix": "reuseable_outline_success_button",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass QOutlineSuccessButton extends StatelessWidget {\nconst QOutlineSuccessButton({\nrequired this.label,\nrequired this.onPressed,\nsuper.key,\nthis.width,\n});\nfinal String label;\nfinal Function onPressed;\nfinal double? width;\n\n@override\nWidget build(BuildContext context) {\nreturn SizedBox(\nwidth: width ?? MediaQuery.of(context).size.width,\nheight: 48,\nchild: OutlinedButton(\nstyle: OutlinedButton.styleFrom(\nforegroundColor: primaryColor,\nside: BorderSide(\ncolor: primaryColor,\n),\n),\nonPressed: () {\nif (tapProtected) return;\nonPressed();\n},\nchild: Text(\nlabel,\nstyle: TextStyle(\nfontSize: 16,\ncolor: primaryColor,\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_category_picker": {
    "prefix": "reuseable_category_picker",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/shared/theme/theme_config.dart';\n\nclass QCategoryWrapPicker extends StatefulWidget {\nconst QCategoryWrapPicker({\nrequired this.items,\nrequired this.onChanged,\nsuper.key,\nthis.itemBuilder,\nthis.value,\nthis.validator,\nthis.label,\nthis.hint,\nthis.helper,\n});\nfinal List<Map<String, dynamic>> items;\nfinal String? label;\nfinal dynamic value;\nfinal String? Function(int? value)? validator;\nfinal String? hint;\nfinal String? helper;\n\nfinal Function(\nMap<String, dynamic> item,\nbool selected,\nFunction action,\n)? itemBuilder;\n\nfinal Function(\nint index,\nString label,\ndynamic value,\nMap<String, dynamic> item,\n) onChanged;\n\n@override\nState<QCategoryWrapPicker> createState() => _QCategoryWrapPickerState();\n}\n\nclass _QCategoryWrapPickerState extends State<QCategoryWrapPicker> {\nList<Map<String, dynamic>> items = [];\nint selectedIndex = -1;\n\nupdateIndex(newIndex) {\nselectedIndex = newIndex;\nsetState(() {});\nfinal item = items[selectedIndex];\nfinal index = selectedIndex;\nfinal label = item['label'];\nfinal value = item['value'];\nwidget.onChanged(index, label, value, item);\n}\n\nWidget getLabel() {\nif (widget.label == null) return Container();\nreturn Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nText(\n'${widget.label}',\nstyle: TextStyle(\nfontSize: 12,\ncolor: Theme.of(context).textTheme.bodySmall?.color,\n),\n),\nconst SizedBox(\nheight: 6,\n),\n],\n);\n}\n\n@override\nvoid initState() {\nitems = widget.items;\nif (widget.value != null) {\nselectedIndex = items.indexWhere((i) => i['value'] == widget.value);\n}\nsuper.initState();\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nwidth: MediaQuery.of(context).size.width,\nmargin: EdgeInsets.only(\nbottom: widget.label == null ? 0 : 20.0,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) =>\nwidget.validator!(selectedIndex == -1 ? null : selectedIndex),\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\ncontentPadding: EdgeInsets.all(0.0),\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nfocusedBorder: InputBorder.none,\nfilled: false,\nfillColor: Colors.transparent,\nenabledBorder: InputBorder.none,\nerrorBorder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: Container(\nchild: Wrap(\nrunSpacing: 8,\nspacing: 8,\nchildren: List.generate(items.length, (index) {\nfinal selected = selectedIndex == index;\nfinal item = items[index];\n\nif (widget.itemBuilder != null) {\nreturn widget.itemBuilder!(item, selected, () {\nupdateIndex(index);\n});\n}\n\nfinal count = item['count'] ?? 0;\n\nreturn Container(\nheight: 32,\nchild: InkWell(\nonTap: () => updateIndex(index),\nchild: Container(\npadding: const EdgeInsets.symmetric(\nhorizontal: 8,\nvertical: 8,\n),\ndecoration: BoxDecoration(\ncolor: selected ? primaryColor : disabledColor,\nborderRadius: const BorderRadius.all(\nRadius.circular(12),\n),\n),\nchild: Wrap(\nchildren: [\nText(\nitem['label'],\nstyle: TextStyle(\nfontSize: 12,\ncolor: selected ? Colors.white : textColor,\n),\n),\nconst SizedBox(\nwidth: 4,\n),\nif (count > 0)\nCircleAvatar(\nradius: 6,\nbackgroundColor: Colors.red,\nchild: Text(\n'$count',\nstyle: const TextStyle(\ncolor: Colors.white,\nfontSize: 8,\n),\n),\n),\n],\n),\n),\n),\n);\n}),\n),\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_tag_picker": {
    "prefix": "reuseable_tag_picker",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/shared/theme/theme_config.dart';\n\nclass QTagPicker extends StatefulWidget {\nconst QTagPicker({\nrequired this.items,\nrequired this.onChanged,\nsuper.key,\nthis.itemBuilder,\nthis.value,\nthis.validator,\nthis.label,\nthis.hint,\nthis.helper,\n});\nfinal List<Map<String, dynamic>> items;\nfinal String? label;\nfinal dynamic value;\nfinal String? Function(int? value)? validator;\nfinal String? hint;\nfinal String? helper;\n\nfinal Function(\nMap<String, dynamic> item,\nbool selected,\nFunction action,\n)? itemBuilder;\n\nfinal Function(\nint index,\nString label,\ndynamic value,\nMap<String, dynamic> item,\n) onChanged;\n\n@override\nState<QTagPicker> createState() => _QTagPickerState();\n}\n\nclass _QTagPickerState extends State<QTagPicker> {\nList<Map<String, dynamic>> items = [];\nint selectedIndex = -1;\n\nupdateIndex(newIndex) {\nselectedIndex = newIndex;\nsetState(() {});\nfinal item = items[selectedIndex];\nfinal index = selectedIndex;\nfinal label = item['label'];\nfinal value = item['value'];\nwidget.onChanged(index, label, value, item);\n}\n\nWidget getLabel() {\nif (widget.label == null) return Container();\nreturn Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nText(\n'${widget.label}',\nstyle: TextStyle(\nfontSize: 12,\ncolor: Theme.of(context).textTheme.bodySmall?.color,\n),\n),\nconst SizedBox(\nheight: 6,\n),\n],\n);\n}\n\n@override\nvoid initState() {\nitems = widget.items;\nif (widget.value != null) {\nselectedIndex = items.indexWhere((i) => i['value'] == widget.value);\n}\nsuper.initState();\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) =>\nwidget.validator!(selectedIndex == -1 ? null : selectedIndex),\nbuilder: (FormFieldState<bool> field) {\nreturn Container(\nwidth: MediaQuery.of(context).size.width,\nchild: Wrap(\nalignment: WrapAlignment.start,\nrunAlignment: WrapAlignment.start,\nspacing: 8,\nrunSpacing: 8,\nchildren: List.generate(items.length, (index) {\nfinal selected = selectedIndex == index;\nfinal item = items[index];\n\nif (widget.itemBuilder != null) {\nreturn widget.itemBuilder!(item, selected, () {\nupdateIndex(index);\n});\n}\n\nreturn Container(\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: selected ? primaryColor : disabledColor,\nforegroundColor: selected ? Colors.white : textColor,\nelevation: 0,\n),\nonPressed: () => updateIndex(index),\nchild: Wrap(\nchildren: [\nIcon(\nitem['icon'],\nsize: 20,\n),\nconst SizedBox(\nwidth: 6,\n),\nText(\nitem['label'],\nstyle: TextStyle(\nfontSize: 12.0,\n),\n),\n],\n),\n),\n);\n}),\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_check_field": {
    "prefix": "reuseable_check_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QCheckField extends StatefulWidget {\nconst QCheckField({\nrequired this.label,\nrequired this.items,\nrequired this.onChanged,\nsuper.key,\nthis.validator,\nthis.value,\nthis.onFuture,\nthis.hint,\nthis.helper,\nthis.singleValue = false,\n});\nfinal String label;\nfinal String? hint;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(List<Map<String, dynamic>> item)? validator;\nfinal List? value;\nfinal Future<List<Map<String, dynamic>>> Function()? onFuture;\nfinal Function(List<Map<String, dynamic>> values, List ids) onChanged;\nfinal String? helper;\nfinal bool singleValue;\n\n@override\nState<QCheckField> createState() => _QCheckFieldState();\n}\n\nclass _QCheckFieldState extends State<QCheckField> {\nList<Map<String, dynamic>> items = [];\n\n@override\nvoid initState() {\nsuper.initState();\nfor (final item in widget.items) {\nitems.add(Map.from(item));\n}\n\n//Set Value\nif (widget.value != null &&\nwidget.value!.isNotEmpty &&\nwidget.value!.first is int) {\nprint(\"LIST INT???\");\nfor (final item in widget.value!) {\nfinal itemValue = item;\nfinal index = items.indexWhere((i) => i['value'] == itemValue);\nif (index == -1) continue;\nitems[index]['checked'] = true;\n}\n} else {\nif (widget.value != null) {\nfor (final item in widget.value!) {\nfinal itemValue = item['value'];\nfinal index = items.indexWhere((i) => i['value'] == itemValue);\nif (index == -1) continue;\nitems[index]['checked'] = item['checked'];\n}\n}\n}\nloadItems();\n}\n\nsetValue(List values) {\nfor (final itemRow in values) {\nfinal searchValues =\nwidget.items.where((i) => i['value'] == itemRow['value']).toList();\nif (searchValues.isEmpty) {\nitems.add(itemRow);\n}\n}\nsetState(() {});\n}\n\ngetValue() {}\n\nFuture<void> loadItems() async {\nif (widget.onFuture == null) return;\n\nfinal newItems = await widget.onFuture!();\nitems = newItems;\nsetState(() {});\n}\n\nuncheckAll() {\nif (widget.singleValue) {\nfor (var index = 0; index < items.length; index++) {\nitems[index]['checked'] = false;\n}\n}\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) {\nif (widget.validator != null) widget.validator!(items);\nreturn null;\n},\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: ListView.builder(\nshrinkWrap: true,\nitemCount: items.length,\nphysics: const NeverScrollableScrollPhysics(),\nitemBuilder: (context, index) {\nfinal item = items[index];\nreturn CheckboxListTile(\ncontentPadding: const EdgeInsets.all(0),\ntitle: Text(\"${item[\"label\"]}\"),\nvalue: item['checked'] ?? false,\nonChanged: (val) {\nuncheckAll();\nitems[index]['checked'] = val;\nfield.didChange(true);\nsetState(() {});\n\nfinal selectedValues =\nitems.where((i) => i['checked'] == true).toList();\n\nfinal ids = selectedValues.map((e) => e['value']).toList();\nwidget.onChanged(selectedValues, ids);\n},\n);\n},\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_date_picker": {
    "prefix": "reuseable_date_picker",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass QDatePicker extends StatefulWidget {\nconst QDatePicker({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\n});\nfinal String label;\nfinal DateTime? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal Function(DateTime) onChanged;\n\n@override\nState<QDatePicker> createState() => _QDatePickerState();\n}\n\nclass _QDatePickerState extends State<QDatePicker> {\nDateTime? selectedValue;\nlate TextEditingController controller;\n@override\nvoid initState() {\nsuper.initState();\nselectedValue = widget.value;\ncontroller = TextEditingController(\ntext: getInitialValue(),\n);\n}\n\nString getInitialValue() {\nif (widget.value != null) {\nreturn DateFormat('d MMM y').format(widget.value!);\n}\nreturn '-';\n}\n\nString getFormattedValue() {\nif (selectedValue != null) {\nreturn DateFormat('d MMM y').format(selectedValue!);\n}\nreturn '-';\n}\n\n@override\nWidget build(BuildContext context) {\nreturn InkWell(\nfocusColor: Colors.transparent,\nhoverColor: Colors.transparent,\nhighlightColor: Colors.transparent,\nonTap: () async {\nfinal pickedDate = await showDatePicker(\ncontext: context,\ninitialDate: widget.value ?? now,\nfirstDate: DateTime(2000),\nlastDate: DateTime(2100),\n);\nselectedValue = pickedDate;\ncontroller.text = getFormattedValue();\nsetState(() {});\n\nif (selectedValue == null) return;\nwidget.onChanged(selectedValue!);\n},\nchild: AbsorbPointer(\nchild: Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: TextFormField(\ncontroller: controller,\nvalidator: (value) {\nif (widget.validator != null) {\nreturn widget.validator!(selectedValue.toString());\n}\nreturn null;\n},\nreadOnly: true,\nstyle: TextStyle(\nfontSize: 14.0,\n),\ndecoration: InputDecoration(\nlabelText: widget.label,\nlabelStyle: const TextStyle(\ncolor: Colors.blueGrey,\n),\nsuffixIcon: const Icon(\nIcons.date_range,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_dropdown_field": {
    "prefix": "reuseable_dropdown_field",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/shared/util/log/log.dart';\n\nclass QDropdownField extends StatefulWidget {\nconst QDropdownField({\nrequired this.label,\nrequired this.items,\nrequired this.onChanged,\nsuper.key,\nthis.value,\nthis.validator,\nthis.emptyMode = true,\nthis.hint,\nthis.helper,\n});\nfinal String label;\nfinal String? hint;\nfinal String? helper;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(Map<String, dynamic>? value)? validator;\nfinal dynamic value;\nfinal bool emptyMode;\nfinal Function(\ndynamic value,\nString? label,\n) onChanged;\n\n@override\nState<QDropdownField> createState() => _QDropdownFieldState();\n}\n\nclass _QDropdownFieldState extends State<QDropdownField> {\nList<Map<String, dynamic>> items = [];\nMap<String, dynamic>? selectedValue;\n\n@override\nvoid initState() {\nsuper.initState();\n\nitems = [];\nif (widget.emptyMode) {\nitems.add({\n'label': '-',\n'value': '-',\n});\n\nselectedValue = {\n'label': '-',\n'value': '-',\n};\n}\n\nfor (final item in widget.items) {\nitems.add(item);\n}\n\nfinal values = widget.items\n.where((i) => i['value'].toString() == widget.value.toString())\n.toList();\nif (values.isNotEmpty) {\nselectedValue = values.first;\n}\n}\n\nMap<String, dynamic>? get currentValue {\nif (widget.emptyMode) {\nfinal foundItems =\nitems.where((i) => i['value'] == selectedValue?['value']).toList();\nif (foundItems.isNotEmpty) {\nreturn foundItems.first;\n}\n\nreturn {\n'label': '-',\n'value': '-',\n};\n} else {\nfinal foundItems =\nitems.where((i) => i['value'] == selectedValue?['value']).toList();\nif (foundItems.isNotEmpty) {\nreturn foundItems.first;\n}\n}\nreturn null;\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) {\nif (widget.validator != null) {\nif (widget.emptyMode && selectedValue?['value'] == '-') {\nreturn widget.validator!(null);\n}\nreturn widget.validator!(selectedValue);\n}\nreturn null;\n},\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nhelperText: widget.hint,\n),\nchild: DropdownButtonHideUnderline(\nchild: ButtonTheme(\nchild: SizedBox(\nheight: 20,\nchild: DropdownButton<Map<String, dynamic>>(\nisExpanded: true,\nvalue: currentValue,\nicon: Icon(\nIcons.arrow_drop_down_outlined,\nsize: 24,\ncolor: Theme.of(context).textTheme.bodyLarge!.color,\n),\niconSize: 16,\nelevation: 16,\nstyle: TextStyle(\nfontSize:\nTheme.of(context).textTheme.bodyMedium!.fontSize,\nfontFamily:\nTheme.of(context).textTheme.bodyMedium!.fontFamily,\ncolor: Theme.of(context).textTheme.bodyMedium!.color,\n),\nunderline: Container(\nheight: 0,\ncolor: Colors.grey[300],\n),\nonChanged: (Map<String, dynamic>? newValue) {\nif (widget.emptyMode && newValue?['value'] == '-') {\nselectedValue = {\n'label': '-',\n'value': '-',\n};\n} else {\nselectedValue = newValue;\n}\nsetState(() {});\n\nvar label = selectedValue!['label'].toString();\nvar value = selectedValue!['value'];\n\nif (value == \"-\") {\nvalue = null;\n}\nwidget.onChanged(value, label);\n\nprintg(\"$value, $label\");\n},\nitems: List.generate(\nitems.length,\n(index) {\nfinal item = items[index];\nreturn DropdownMenuItem<Map<String, dynamic>>(\nvalue: item,\nchild: Padding(\npadding: const EdgeInsets.symmetric(),\nchild: Text(\nitem['label'].toString(),\n),\n),\n);\n},\n),\n),\n),\n),\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_file_picker": {
    "prefix": "reuseable_file_picker",
    "body": "import 'dart:io';\nimport 'package:dio/dio.dart';\nimport 'package:file_picker/file_picker.dart';\nimport 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nconst String _CLOUDINARY_CLOUD_NAME = 'dotz74j1p';\nconst String _CLOUDINARY_API_KEY = '983354314759691';\nconst String _CLOUDINARY_UPLOAD_PRESET = 'yogjjkoh';\n\nclass QFilePicker extends StatefulWidget {\nconst QFilePicker({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.obscure = false,\nthis.extensions = const ['csv', 'pdf', 'txt'],\nthis.enabled = true,\n});\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal bool obscure;\nfinal Function(String) onChanged;\nfinal List<String> extensions;\nfinal bool enabled;\n\n@override\nState<QFilePicker> createState() => _QFilePickerState();\n}\n\nclass _QFilePickerState extends State<QFilePicker> {\nString? fileUrl;\nbool loading = false;\nlate TextEditingController controller;\n@override\nvoid initState() {\nfileUrl = widget.value;\ncontroller = TextEditingController(\ntext: widget.value ?? '-',\n);\nsuper.initState();\n}\n\nFuture<String?> getFileMultiplePlatform() async {\nfinal result = await FilePicker.platform.pickFiles(\ntype: FileType.custom,\nallowedExtensions: widget.extensions,\n);\nif (result == null) return null;\nreturn result.files.first.path;\n}\n\nFuture<String> uploadToCloudinary(String filePath) async {\nfinal formData = FormData.fromMap({\n'file': MultipartFile.fromBytes(\nFile(filePath).readAsBytesSync(),\nfilename: \"upload.${filePath.split(\".\").last}\",\n),\n'upload_preset': _CLOUDINARY_UPLOAD_PRESET,\n'api_key': _CLOUDINARY_API_KEY,\n});\n\nfinal res = await Dio().post(\n'https://api.cloudinary.com/v1_1/$_CLOUDINARY_CLOUD_NAME/raw/upload',\ndata: formData,\n);\n\nfinal String url = res.data['secure_url'];\nreturn url;\n}\n\nFuture<void> browseFile() async {\nif (loading) return;\nString? filePath;\n\nfilePath = await getFileMultiplePlatform();\nif (filePath == null) return;\n\nloading = true;\nsetState(() {});\n\nfileUrl = await uploadToCloudinary(filePath);\n\nloading = false;\nsetState(() {});\n\nif (fileUrl != null) {\nwidget.onChanged(fileUrl!);\ncontroller.text = fileUrl!;\n}\nsetState(() {});\n}\n\nviewFile() async {\nfinal url = fileUrl!; // Replace with your URL\nprint(url);\nif (await canLaunchUrl(Uri.parse(url))) {\nawait launchUrl(Uri.parse(url));\n} else {\nthrow 'Could not launch $url';\n}\n}\n\nString? get currentValue {\nreturn fileUrl;\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\npadding: const EdgeInsets.symmetric(vertical: 4),\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: Stack(\nchildren: [\nRow(\nchildren: [\nExpanded(\nchild: FormField(\ninitialValue: false,\nvalidator: (value) {\nreturn widget.validator!(fileUrl);\n},\nbuilder: (FormFieldState<bool> field) {\nreturn Row(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nExpanded(\nchild: TextFormField(\ncontroller: controller,\nobscureText: widget.obscure,\nreadOnly: true,\ndecoration: InputDecoration(\nlabelText: widget.label,\nlabelStyle: const TextStyle(\ncolor: Colors.blueGrey,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\nerrorText: field.errorText,\n),\nonChanged: (value) {\nwidget.onChanged(value);\n},\n),\n),\nconst SizedBox(\nwidth: 6,\n),\nif (widget.enabled)\nContainer(\nwidth: 50,\nheight: 46,\nmargin: const EdgeInsets.only(\nright: 4,\n),\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\npadding: const EdgeInsets.all(0),\nbackgroundColor: primaryColor,\nforegroundColor: Colors.white,\n),\nonPressed: browseFile,\nchild: const Icon(\nIcons.file_upload,\nsize: 24,\n),\n),\n),\nif (fileUrl != null)\nContainer(\nwidth: 50,\nheight: 46,\nmargin: const EdgeInsets.only(\nright: 4,\n),\nchild: ElevatedButton(\nstyle: ElevatedButton.styleFrom(\npadding: const EdgeInsets.all(0),\nbackgroundColor: primaryColor,\nforegroundColor: Colors.white,\n),\nonPressed: viewFile,\nchild: const Icon(\nIcons.remove_red_eye,\nsize: 24,\n),\n),\n),\n],\n);\n},\n),\n),\n],\n),\nif (loading)\nPositioned(\nleft: 0,\nright: 0,\nbottom: 0,\ntop: 0,\nchild: Container(\ndecoration: const BoxDecoration(\ncolor: Colors.black26,\nborderRadius: BorderRadius.all(\nRadius.circular(\n8,\n),\n),\n),\nchild: Center(\nchild: Text(\n'Uploading...',\nstyle: const TextStyle(\nfontSize: 14,\ncolor: Colors.white,\n),\n),\n),\n),\n),\n],\n),\n);\n}\n}\n"
  },
  "reuseable_camera_picker": {
    "prefix": "reuseable_camera_picker",
    "body": "import 'dart:convert';\nimport 'dart:io';\nimport 'package:dio/dio.dart';\nimport 'package:file_picker/file_picker.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:image_picker/image_picker.dart';\n\nclass QCameraPicker extends StatefulWidget {\nconst QCameraPicker({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.obscure = false,\nthis.provider = 'cloudinary',\n});\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal bool obscure;\nfinal Function(String) onChanged;\nfinal String? provider;\n\n@override\nState<QCameraPicker> createState() => _QCameraPickerState();\n}\n\nclass _QCameraPickerState extends State<QCameraPicker> {\nString? imageUrl;\nbool loading = false;\nlate TextEditingController controller;\n@override\nvoid initState() {\nimageUrl = widget.value;\ncontroller = TextEditingController(\ntext: widget.value ?? '-',\n);\nsuper.initState();\n}\n\nFuture<String?> getFileMultiplePlatform() async {\nfinal result = await FilePicker.platform.pickFiles(\ntype: FileType.custom,\nallowedExtensions: [\n'png',\n'jpg',\n],\n);\nif (result == null) return null;\nreturn result.files.first.path;\n}\n\nFuture<String?> getFileAndroidIosAndWeb() async {\nfinal image = await ImagePicker().pickImage(\nsource: ImageSource.camera,\npreferredCameraDevice: CameraDevice.front,\nimageQuality: 40,\n);\nfinal filePath = image?.path;\nif (filePath == null) return null;\n\nfinal file = File(filePath);\nfinal bytes = await file.readAsBytes();\nreturn base64Encode(bytes);\n}\n\nFuture<String?> uploadFile(String filePath) async {\nif (widget.provider == 'cloudinary') {\nreturn await uploadToCloudinary(filePath);\n}\nreturn await uploadToImgBB(filePath);\n}\n\nFuture<String> uploadToImgBB(String filePath) async {\nfinal formData = FormData.fromMap({\n'image': MultipartFile.fromBytes(\nFile(filePath).readAsBytesSync(),\nfilename: 'upload.jpg',\n),\n});\n\nfinal res = await Dio().post(\n'https://api.imgbb.com/1/upload?key=b55ef3fd02b80ab180f284e479acd7c4',\ndata: formData,\n);\n\nfinal data = res.data['data'];\nfinal url = data['url'];\nwidget.onChanged(url);\nreturn url;\n}\n\nFuture<String> uploadToCloudinary(String filePath) async {\nconst cloudName = 'dotz74j1p';\nconst apiKey = '983354314759691';\n\nfinal formData = FormData.fromMap({\n'file': MultipartFile.fromBytes(\nFile(filePath).readAsBytesSync(),\nfilename: 'upload.jpg',\n),\n'upload_preset': 'yogjjkoh',\n'api_key': apiKey,\n});\n\nfinal res = await Dio().post(\n'https://api.cloudinary.com/v1_1/$cloudName/image/upload',\ndata: formData,\n);\n\nfinal String url = res.data['secure_url'];\nreturn url;\n}\n\nFuture<void> browsePhoto() async {\nif (loading) return;\n\nString? base64Image;\nloading = true;\nsetState(() {});\n\nif (!kIsWeb && Platform.isWindows) {\nbase64Image = await getFileMultiplePlatform();\n} else {\nbase64Image = await getFileAndroidIosAndWeb();\n}\nif (base64Image == null) return;\n\nimageUrl = base64Image;\nloading = false;\n\nif (imageUrl != null) {\nwidget.onChanged(imageUrl!);\ncontroller.text = imageUrl!;\n}\nsetState(() {});\n}\n\nString? get currentValue {\nreturn imageUrl;\n}\n\n@override\nWidget build(BuildContext context) {\nreturn FormField(\ninitialValue: false,\nvalidator: (value) {\nif (widget.validator != null) {\nreturn widget.validator!(imageUrl ?? '');\n}\nreturn null;\n},\nbuilder: (FormFieldState<bool> field) {\nImageProvider image;\nif (imageUrl != null && imageUrl!.startsWith('http')) {\nimage = NetworkImage(\nimageUrl ??\n'https://res.cloudinary.com/dotz74j1p/image/upload/v1715660683/no-image.jpg',\n);\n} else if (imageUrl == null) {\nimage = const NetworkImage(\n'https://res.cloudinary.com/dotz74j1p/image/upload/v1715660683/no-image.jpg',\n);\n} else {\nimage = MemoryImage(\nbase64Decode(imageUrl!),\n);\n}\nreturn InkWell(\nonTap: browsePhoto,\nchild: Column(\nchildren: [\nContainer(\nheight: 200,\nclipBehavior: Clip.antiAlias,\ndecoration: BoxDecoration(\ncolor: const Color(0xffededed),\nimage: DecorationImage(\nimage: image,\nfit: BoxFit.cover,\n),\nborderRadius: const BorderRadius.all(\nRadius.circular(\n8,\n),\n),\n),\nchild: Stack(\nchildren: [\nif (loading)\nContainer(\ndecoration: BoxDecoration(\ncolor: Colors.grey.withOpacity(0.6),\n),\n),\nif (loading)\nconst Center(\nchild: CircularProgressIndicator(),\n),\n],\n),\n),\n],\n),\n);\n},\n);\n}\n}\n"
  },
  "reuseable_image_picker": {
    "prefix": "reuseable_image_picker",
    "body": "import 'dart:io';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nconst String _CLOUDINARY_CLOUD_NAME = 'dotz74j1p';\nconst String _CLOUDINARY_API_KEY = '983354314759691';\nconst String _CLOUDINARY_UPLOAD_PRESET = 'yogjjkoh';\n\nenum AttachmentType {\nimage,\nfile,\n}\n\nclass QFilesPicker extends StatefulWidget {\nQFilesPicker({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.value = const [],\nthis.validator,\nthis.hint,\nthis.helper,\nthis.extensions = const ['jpg', 'png'],\nthis.enabled = true,\nthis.attachmentType = AttachmentType.image,\n});\nfinal AttachmentType attachmentType;\nfinal String label;\nfinal List<String>? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal Function(List<String>) onChanged;\nfinal List<String> extensions;\nfinal bool enabled;\n\n@override\nState<QFilesPicker> createState() => _QFilesPickerState();\n}\n\nclass _QFilesPickerState extends State<QFilesPicker> {\nString? imageUrl;\nbool loading = false;\n@override\nvoid initState() {\nselectedFiles = widget.value ?? [];\n\nsuper.initState();\n}\n\nList<String> selectedFiles = [];\n\nFuture<void> getFileMultiplePlatform() async {\nfinal result = await FilePicker.platform.pickFiles(\ntype: FileType.custom,\nallowedExtensions: widget.extensions,\nallowMultiple: true,\ncompressionQuality: 1,\n);\nif (result == null) return null;\n\nloading = true;\nsetState(() {});\n\nfor (var file in result.files) {\nvar url = await uploadToCloudinary(file.path!);\nselectedFiles.add(url);\n}\nsetState(() {});\n\nwidget.onChanged(selectedFiles);\n}\n\nFuture<String> uploadToCloudinary(String filePath) async {\nfinal formData = FormData.fromMap({\n'file': MultipartFile.fromBytes(\nFile(filePath).readAsBytesSync(),\nfilename: 'upload.jpg',\n),\n'upload_preset': _CLOUDINARY_UPLOAD_PRESET,\n'api_key': _CLOUDINARY_API_KEY,\n});\n\nprint(\"Uploading...\");\nfinal res = await Dio().post(\n'https://api.cloudinary.com/v1_1/$_CLOUDINARY_CLOUD_NAME/image/upload',\ndata: formData,\n);\n\nfinal String url = res.data['secure_url'];\nprint(\"Upload complete... $url\");\n\nreturn url;\n}\n\nFuture<void> browseFile() async {\nif (loading) return;\n\nawait getFileMultiplePlatform();\n\nloading = false;\nsetState(() {});\n}\n\nString? get currentValue {\nreturn imageUrl;\n}\n\n@override\nWidget build(BuildContext context) {\nWidget getImageWidgets() {\nreturn LayoutBuilder(builder: (context, constraints) {\nint axisCount = (constraints.biggest.width / 160.0).floor();\nreturn GridView.builder(\npadding: EdgeInsets.all(12.0),\ngridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\nchildAspectRatio: 1.0,\ncrossAxisCount: axisCount,\nmainAxisSpacing: 6,\ncrossAxisSpacing: 6,\n),\nitemCount: selectedFiles.length,\nshrinkWrap: true,\nphysics: ScrollPhysics(),\nitemBuilder: (BuildContext context, int index) {\nvar file = selectedFiles[index];\nreturn Container(\nclipBehavior: Clip.antiAlias,\ndecoration: BoxDecoration(\nborderRadius: BorderRadius.all(\nRadius.circular(12.0),\n),\n),\nchild: Stack(\nchildren: [\nif (widget.attachmentType == AttachmentType.image)\nImage.network(\n\"${file}\",\nwidth: 200.0,\nheight: 200.0,\nfit: BoxFit.cover,\n),\nif (widget.attachmentType == AttachmentType.file)\nContainer(\npadding: const EdgeInsets.all(12.0),\nheight: 200,\nwidth: 200,\ndecoration: BoxDecoration(\ncolor: Colors.grey[400]!,\n),\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nText(\n\"${file.split(\"/\").last}\",\ntextAlign: TextAlign.center,\nmaxLines: 3,\noverflow: TextOverflow.ellipsis,\nstyle: TextStyle(\nfontSize: 12.0,\ncolor: Colors.grey[900],\n),\n),\nconst SizedBox(\nheight: 4.0,\n),\nText(\n\"${file.split(\"/\").last.split(\".\").last}\",\ntextAlign: TextAlign.center,\nmaxLines: 3,\noverflow: TextOverflow.ellipsis,\nstyle: TextStyle(\nfontSize: 14.0,\ncolor: Colors.grey[900],\nfontWeight: FontWeight.bold,\n),\n),\n],\n),\n),\nif (!loading)\nPositioned(\nright: 4,\ntop: 4,\nchild: InkWell(\nonTap: () {\nselectedFiles.remove(file);\nsetState(() {});\n},\nchild: CircleAvatar(\nradius: 12.0,\nbackgroundColor: Colors.black.withOpacity(0.6),\nchild: Icon(\nIcons.close,\ncolor: Colors.white,\nsize: 12.0,\n),\n),\n),\n),\n],\n),\n);\n},\n);\n});\n}\n\nreturn InkWell(\nonTap: browseFile,\nchild: Container(\nmargin: EdgeInsets.only(\nbottom: 12,\n),\nchild: Column(\nchildren: [\nContainer(\nconstraints: BoxConstraints(\nminHeight: 120,\n),\nwidth: MediaQuery.of(context).size.width,\ndecoration: BoxDecoration(\ncolor: Colors.grey[300],\nborderRadius: BorderRadius.all(\nRadius.circular(12.0),\n),\n),\nchild: Column(\nchildren: [\nStack(\nchildren: [\ngetImageWidgets(),\nif (selectedFiles.isEmpty)\nContainer(\nwidth: MediaQuery.of(context).size.width,\nmargin: EdgeInsets.only(\ntop: 30.0,\n),\nchild: Column(\nchildren: [\nIcon(\nIcons.image,\nsize: 54.0,\ncolor: Colors.grey[600],\n),\nSizedBox(\nheight: 12.0,\n),\n],\n),\n),\nPositioned(\nbottom: 0,\nright: 8,\nchild: Container(\ntransform: Matrix4.translationValues(0.0, 10, 0),\npadding: const EdgeInsets.symmetric(\nhorizontal: 8.0,\nvertical: 4.0,\n),\ndecoration: BoxDecoration(\ncolor: primaryColor,\nborderRadius: BorderRadius.all(\nRadius.circular(12.0),\n),\n),\nchild: Text(\n\"${widget.extensions.join(\",\")}\",\nstyle: TextStyle(\nfontSize: 12.0,\ncolor: Colors.white,\n),\n),\n),\n),\n],\n),\nContainer(\ntransform: Matrix4.translationValues(0.0, -6, 0),\nchild: Text(\nloading ? \"Uploading...\" : \"*click to upload file(s)\",\nstyle: TextStyle(\nfontSize: 12.0,\n),\n),\n),\nif (loading)\nContainer(\ntransform: Matrix4.translationValues(0.0, -6, 0),\nchild: LinearProgressIndicator(),\n),\n],\n),\n),\n],\n),\n),\n);\n}\n}\n"
  },
  "reuseable_list_view": {
    "prefix": "reuseable_list_view",
    "body": "import 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass GorelaxListView extends StatefulWidget {\nconst GorelaxListView({\nrequired this.builder,\nrequired this.futureBuilder,\nthis.id,\nthis.height,\nthis.padding,\nthis.gradient,\nthis.color,\nthis.scrollDirection,\nthis.wrapMode = false,\nthis.shrinkWrap = false,\nthis.bottomMargin,\nthis.onDismiss,\nsuper.key,\n});\nstatic Map<String, GorelaxListViewState> instance = {};\nfinal String? id;\nfinal Function(int page) futureBuilder;\nfinal Function(Map<String, dynamic> item)? onDismiss;\nfinal double? height;\nfinal double? padding;\nfinal Gradient? gradient;\nfinal Color? color;\nfinal Axis? scrollDirection;\nfinal bool wrapMode;\nfinal bool shrinkWrap;\nfinal double? bottomMargin;\n\nstatic reloadAll() async {\nfor (final key in instance.keys) {\ninstance[key]?.reload();\n}\n}\n\nfinal Function(int, Map<String, dynamic>) builder;\n\n@override\nState<GorelaxListView> createState() => GorelaxListViewState();\n}\n\nclass GorelaxListViewState extends State<GorelaxListView> {\nbool loading = true;\nbool bottomLoading = false;\nResponse? response;\nDioException? dioError;\nList<Map?> items = [];\nint page = 1;\nScrollController scrollController = ScrollController();\n\nbool singleModeLoading = false;\n\nFuture onLoading({\nbool nextPage = false,\n}) async {\nif (!mounted) return;\nif (!nextPage) {\npage = 1;\nitems.clear();\nloading = true;\nif (mounted) setState(() {});\n} else {\npage++;\n}\n\ndioError = null;\ntry {\nresponse = await widget.futureBuilder(page);\n} on DioException catch (_) {\ndioError = _;\ndebugPrint('DioError: $_');\n} on Exception catch (_) {\ndebugPrint('Exception: $_');\n}\n\nif (dioError != null || response == null) {\nloading = false;\nif (mounted) setState(() {});\nreturn;\n}\n\nfinal Map responseMap = response?.data;\nfinal List data = responseMap['data'];\n\nif (data.isEmpty) {\npage--;\n}\n\nfor (var i = 0; i < data.length; i++) {\nfinal item = data[i];\nitems.add(item);\n}\n\nloading = false;\nif (mounted) setState(() {});\n}\n\ninitScrollController() {\nscrollController = ScrollController();\nscrollController.addListener(() {\nif (scrollController.hasClients) {\nif (scrollController.offset ==\nscrollController.position.maxScrollExtent) {\nonLoading(nextPage: true);\n}\n}\n});\n}\n\nlate String id;\n\n@override\nvoid initState() {\nsuper.initState();\nid = widget.id ?? const Uuid().v4();\nGorelaxListView.instance[id] = this;\ninitScrollController();\nonLoading();\n}\n\n@override\nvoid dispose() {\nsuper.dispose();\nGorelaxListView.instance.remove(id);\n}\n\nreload() async {\nif (mounted) {\nawait onLoading();\n}\n}\n\n@override\nWidget build(BuildContext context) {\nif (loading) {\nreturn const Center(\nchild: CircularProgressIndicator(),\n);\n}\nif (widget.wrapMode) {\nreturn Wrap(\nchildren: List.generate(\nitems.length,\n(index) {\nfinal item = items[index]! as Map<String, dynamic>;\n\nreturn widget.builder(index, item);\n},\n),\n);\n}\n\nif (dioError != null) {\nreturn SizedBox(\nheight: widget.height,\nwidth: MediaQuery.of(context).size.width,\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nText(\n'Dio Error : ${dioError?.message}',\nstyle: const TextStyle(\nfontSize: 12,\nfontWeight: FontWeight.bold,\n),\n),\nconst SizedBox(\nheight: 10,\n),\nElevatedButton.icon(\nicon: const Icon(Icons.refresh),\nlabel: Text(\n'Retry',\n),\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: Colors.blueGrey,\n),\nonPressed: onLoading,\n),\n],\n),\n);\n}\n\nif (response == null) {\nreturn SizedBox(\nheight: widget.height,\nwidth: MediaQuery.of(context).size.width,\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nText(\n'Null response : ${response?.statusCode}',\nstyle: const TextStyle(\nfontSize: 12,\nfontWeight: FontWeight.bold,\n),\n),\nconst SizedBox(\nheight: 10,\n),\nElevatedButton.icon(\nicon: const Icon(Icons.refresh),\nlabel: Text(\n'Refresh',\n),\nstyle: ElevatedButton.styleFrom(\nbackgroundColor: Colors.blueGrey,\n),\nonPressed: onLoading,\n),\n],\n),\n);\n}\n\nreturn Container(\nheight: widget.height,\nwidth: MediaQuery.of(context).size.width,\npadding: EdgeInsets.all(widget.padding ?? 0.0),\ndecoration: BoxDecoration(\ncolor: widget.color,\ngradient: widget.gradient,\n),\nchild: RefreshIndicator(\nonRefresh: () async {\nawait reload();\n},\nchild: ScrollConfiguration(\nbehavior: ScrollConfiguration.of(context).copyWith(\ndragDevices: {\nPointerDeviceKind.touch,\nPointerDeviceKind.mouse,\n},\n),\nchild: ListView.builder(\ncontroller: scrollController,\nitemCount: items.length,\nshrinkWrap: widget.shrinkWrap,\nscrollDirection: widget.scrollDirection ?? Axis.vertical,\nitemBuilder: (context, index) {\nfinal item = items[index]! as Map<String, dynamic>;\n\nif (widget.onDismiss != null) {\nreturn QDismissible(\nonDismiss: () async {\nawait widget.onDismiss!(item);\n},\nchild: Container(\nmargin: EdgeInsets.only(\nbottom: widget.bottomMargin ?? 0.0,\n),\nchild: widget.builder(index, item),\n),\n);\n}\nreturn Container(\nmargin: EdgeInsets.only(\nbottom: widget.bottomMargin ?? 0.0,\n),\nchild: widget.builder(index, item),\n);\n},\n),\n),\n),\n);\n}\n}\n"
  },
  "reuseable_location_picker_2": {
    "prefix": "reuseable_location_picker_2",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nclass QLocationPicker2 extends StatefulWidget {\nconst QLocationPicker2({\nrequired this.onChanged,\nsuper.key,\nthis.label,\nthis.hint,\nthis.helper,\nthis.latitude,\nthis.longitude,\nthis.validator,\nthis.enableEdit = true,\n});\nfinal String? label;\nfinal String? hint;\nfinal String? helper;\nfinal double? latitude;\nfinal double? longitude;\nfinal String? Function(String?)? validator;\nfinal Function(double latitude, double longitude, String address) onChanged;\nfinal bool enableEdit;\n\n@override\n_QLocationPicker2State createState() => _QLocationPicker2State();\n}\n\nclass _QLocationPicker2State extends State<QLocationPicker2> {\ndouble? latitude;\ndouble? longitude;\nString? address;\n\nbool loading = true;\n\n@override\nvoid initState() {\nsuper.initState();\nlatitude = widget.latitude;\nlongitude = widget.longitude;\n}\n\n@override\nWidget build(BuildContext context) {\nreturn FormField(\nvalidator: (value) {\nvar inputValue = '$latitude,$longitude';\nif (latitude == null) {\ninputValue = '';\n}\nif (widget.validator != null) {\nreturn widget.validator!(inputValue);\n}\nreturn null;\n},\nbuilder: (state) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 16,\n),\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nQButton(\nicon: Icons.location_on,\nlabel: latitude == null ? 'Select location' : 'Change location',\ncolor: latitude == null ? disabledColor : primaryColor,\nonPressed: () async {\nif (await Permission.location.request().isDenied) {\nse('Location access is denied');\nreturn;\n}\n\nawait Get.to(\nGoogleMapViewer(\nlatitude: latitude,\nlongitude: longitude,\nonChanged: (ltd, lng, addr) {\nlatitude = ltd;\nlongitude = lng;\naddress = addr;\n\nprinto('latitude: $latitude');\nprinto('longitude: $longitude');\nprinto('address: $address');\n\nwidget.onChanged(latitude!, longitude!, address!);\n\nsetState(() {});\n},\n),\n);\n},\n),\nconst SizedBox(\nheight: 12,\n),\nif (address != null) ...[\nText(\n'Generated address',\nstyle: const TextStyle(\nfontSize: 14,\nfontWeight: FontWeight.bold,\n),\n),\nText(\naddress!,\nstyle: const TextStyle(\nfontSize: 14,\n),\n),\n],\nif (state.errorText != null)\nText(\nstate.errorText ?? '',\nstyle: const TextStyle(\ncolor: Colors.red,\nfontSize: 14,\n),\n),\n],\n),\n);\n},\n);\n}\n}\n"
  },
  "reuseable_memo_field": {
    "prefix": "reuseable_memo_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QMemoField extends StatefulWidget {\nconst QMemoField({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.maxLength,\nthis.maxLines,\n});\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal int? maxLength;\nfinal int? maxLines;\nfinal Function(String) onChanged;\n\n@override\nState<QMemoField> createState() => _QMemoFieldState();\n}\n\nclass _QMemoFieldState extends State<QMemoField> {\nFocusNode focusNode = FocusNode();\nGlobalKey key = GlobalKey();\n\n@override\nvoid initState() {\nfocusNode.addListener(() {\nprint('focusNodeListener');\nif (focusNode.hasFocus) {\nFuture.delayed(const Duration(milliseconds: 300), () {\nWidgetsBinding.instance.addPostFrameCallback(\n(_) => Scrollable.ensureVisible(\nkey.currentContext!,\nalignmentPolicy: ScrollPositionAlignmentPolicy.keepVisibleAtEnd,\n),\n);\n});\n}\n});\nsuper.initState();\n}\n\n@override\nWidget build(BuildContext context) {\nif (focusNode.hasFocus) {\nFuture.delayed(const Duration(milliseconds: 300), () {\nWidgetsBinding.instance.addPostFrameCallback(\n(_) => Scrollable.ensureVisible(\nkey.currentContext!,\nalignmentPolicy: ScrollPositionAlignmentPolicy.keepVisibleAtEnd,\n),\n);\n});\n}\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: TextFormField(\nkey: key,\ninitialValue: widget.value,\nfocusNode: focusNode,\nvalidator: widget.validator,\nmaxLength: widget.maxLength,\nmaxLines: widget.maxLines ?? 6,\ndecoration: InputDecoration(\ncontentPadding: const EdgeInsets.symmetric(\nhorizontal: 20,\nvertical: 24,\n),\nlabelText: widget.label,\nsuffixIcon: const Icon(\nIcons.text_format,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nonChanged: widget.onChanged,\n),\n);\n}\n}\n"
  },
  "reuseable_number_field": {
    "prefix": "reuseable_number_field",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\nimport 'package:hyper_ui/shared/theme/theme_config.dart';\nimport 'package:intl/intl.dart';\n\nclass QQtyField extends StatefulWidget {\nconst QQtyField({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.onSubmitted,\nthis.pattern,\nthis.locale = 'en_US',\nthis.maxLength,\n});\nfinal String label;\nfinal int? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal Function(int) onChanged;\nfinal Function(int)? onSubmitted;\n\nfinal String? pattern;\nfinal String? locale;\nfinal int? maxLength;\n\n@override\nState<QQtyField> createState() => _QQtyFieldState();\n}\n\nclass _QQtyFieldState extends State<QQtyField> {\nint value = 0;\nlate TextEditingController controller;\n\n@override\nvoid initState() {\nsuper.initState();\nvalue = widget.value ?? 0;\n}\n\nincrement() {\nvalue++;\nsetState(() {});\n\nwidget.onChanged(value);\n}\n\ndecrement() {\nif (value == 0) return;\nvalue--;\nsetState(() {});\nwidget.onChanged(value);\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\ndecoration: BoxDecoration(\nboxShadow: [\nBoxShadow(\ncolor: Color(0x19000000),\nblurRadius: 24,\noffset: Offset(0, 11),\n),\n],\nborderRadius: BorderRadius.all(\nRadius.circular(12.0),\n),\n),\nchild: Row(\nchildren: [\nInkWell(\nonTap: () => increment(),\nchild: CircleAvatar(\nradius: 16.0,\nchild: const Icon(\nIcons.add,\nsize: 24.0,\n),\n),\n),\nExpanded(\nchild: Text(\n\"$value\",\ntextAlign: TextAlign.center,\nstyle: TextStyle(\nfontSize: 18.0,\ncolor: Colors.white,\n),\n),\n),\nInkWell(\nonTap: () => decrement(),\nchild: CircleAvatar(\nradius: 16.0,\nchild: const Icon(\nIcons.remove,\nsize: 24.0,\n),\n),\n),\n],\n),\n);\n}\n}"
  },
  "reuseable_radio_field": {
    "prefix": "reuseable_radio_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QRadioField extends StatefulWidget {\nconst QRadioField({\nrequired this.label,\nrequired this.items,\nrequired this.onChanged,\nsuper.key,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.value,\n});\nfinal String label;\nfinal String? hint;\nfinal String? helper;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(List<Map<String, dynamic>> item)? validator;\nfinal Function(dynamic value, String? label) onChanged;\nfinal String? value;\n\n@override\nState<QRadioField> createState() => _QRadioFieldState();\n}\n\nclass _QRadioFieldState extends State<QRadioField> {\nList<Map<String, dynamic>> items = [];\n\n@override\nvoid initState() {\nsuper.initState();\nfor (final item in widget.items) {\nitems.add(Map.from(item));\nif (items.last['value'] == widget.value) {\nitems.last['checked'] = true;\n}\n}\n}\n\nsetAllItemsToFalse() {\nfor (final item in items) {\nitem['checked'] = false;\n}\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) => widget.validator!(items),\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: ListView.builder(\nshrinkWrap: true,\nitemCount: items.length,\nitemBuilder: (context, index) {\nfinal item = items[index];\nreturn RadioListTile(\ncontentPadding: const EdgeInsets.all(0),\ntitle: Text(\"${item[\"label\"]}\"),\ngroupValue: true,\nvalue: item['checked'] ?? false,\nonChanged: (val) {\nsetAllItemsToFalse();\nfinal newValue = val ? false : true;\nitems[index]['checked'] = newValue;\nfield.didChange(true);\nsetState(() {});\n\nfinal String? label = items[index]['label'];\nfinal foundIndex =\nitems.indexWhere((item) => item['label'] == label);\nfinal dynamic value = items[foundIndex]['value'];\nwidget.onChanged(value, label);\n},\n);\n},\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_rating_field": {
    "prefix": "reuseable_rating_field",
    "body": "import 'package:flutter/material.dart';\nimport 'package:flutter_rating_bar/flutter_rating_bar.dart';\n\nclass QRatingField extends StatefulWidget {\nconst QRatingField({\nrequired this.label,\nsuper.key,\nthis.value,\nthis.onChanged,\nthis.validator,\nthis.enabled = false,\nthis.hint,\nthis.helper,\n});\nfinal String label;\nfinal double? value;\nfinal bool enabled;\nfinal String? Function(double?)? validator;\nfinal Function(double value)? onChanged;\nfinal String? hint;\nfinal String? helper;\n\n@override\nState<QRatingField> createState() => _QRatingFieldState();\n}\n\nclass _QRatingFieldState extends State<QRatingField> {\ndouble? currentValue;\nGlobalKey widgetKey = GlobalKey();\n\n@override\nvoid initState() {\ncurrentValue = widget.value;\nWidgetsBinding.instance.addPostFrameCallback((_) {\ngetHeight();\n});\n\nsuper.initState();\n}\n\ngetHeight() {\nfinal renderBox =\nwidgetKey.currentContext?.findRenderObject() as RenderBox?;\nif (renderBox != null) {\nfinal size = renderBox.size;\nsetState(() {\nwidgetHeight = size.height;\n});\n}\n}\n\ndouble widgetHeight = 0;\n@override\nWidget build(BuildContext context) {\nreturn FormField(\ninitialValue: false,\nenabled: widget.enabled,\nvalidator: (value) {\nif (widget.validator != null) {\nreturn widget.validator!(currentValue);\n}\nreturn null;\n},\nbuilder: (field) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: Container(\nkey: widgetKey,\nchild: LayoutBuilder(\nbuilder: (context, constraints) {\nreturn Stack(\nchildren: [\nTextFormField(\ninitialValue: ' ',\ndecoration: InputDecoration(\nlabelText: widget.label,\nhelperText: widget.helper,\nhintText: widget.hint,\nerrorText: field.errorText,\n),\n),\nAlign(\nalignment: Alignment.centerLeft,\nchild: Container(\nmargin: const EdgeInsets.only(\ntop: 13,\nleft: 20,\n),\nwidth: MediaQuery.of(context).size.width,\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nRatingBar.builder(\ninitialRating: widget.value ?? 0,\nminRating: 1,\nallowHalfRating: true,\nitemBuilder: (context, _) => const Icon(\nIcons.star,\ncolor: Colors.amber,\n),\nitemSize: 20,\nonRatingUpdate: (rating) {\ncurrentValue = rating;\nif (widget.onChanged != null) {\nwidget.onChanged!(rating);\n}\n},\n),\n],\n),\n),\n),\n],\n);\n},\n),\n),\n);\n},\n);\n}\n}\n"
  },
  "reuseable_search_field": {
    "prefix": "reuseable_search_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QSearchField extends StatefulWidget {\nconst QSearchField({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.id,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.maxLength,\nthis.onSubmitted,\nthis.obscure = false,\nthis.enabled = true,\nthis.prefixIcon,\nthis.suffixIcon,\n});\nfinal String? id;\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal bool obscure;\nfinal bool enabled;\nfinal int? maxLength;\nfinal IconData? prefixIcon;\nfinal IconData? suffixIcon;\nfinal Function(String) onChanged;\nfinal Function(String)? onSubmitted;\n\n@override\nState<QSearchField> createState() => _QSearchFieldState();\n}\n\nclass _QSearchFieldState extends State<QSearchField> {\nTextEditingController textEditingController = TextEditingController();\n\n@override\nvoid initState() {\ntextEditingController.text = widget.value ?? '';\nsuper.initState();\n}\n\nString getValue() {\nreturn textEditingController.text;\n}\n\nsetValue(value) {\ntextEditingController.text = value;\n}\n\nresetValue() {\ntextEditingController.text = '';\n}\n\nfocus() {\nfocusNode.requestFocus();\n}\n\nFocusNode focusNode = FocusNode();\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: TextFormField(\nenabled: widget.enabled,\ncontroller: textEditingController,\nfocusNode: focusNode,\nvalidator: widget.validator,\nmaxLength: widget.maxLength,\nobscureText: widget.obscure,\ndecoration: InputDecoration(\nlabelText: widget.label,\nprefixIcon: Icon(\nwidget.prefixIcon,\n),\nsuffixIcon: Icon(\nwidget.suffixIcon,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nonChanged: (value) {\nwidget.onChanged(value);\n},\nonFieldSubmitted: (value) {\nif (widget.onSubmitted != null) widget.onSubmitted!(value);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_switch": {
    "prefix": "reuseable_switch",
    "body": "import 'package:flutter/material.dart';\n\nclass QSwitch extends StatefulWidget {\nconst QSwitch({\nrequired this.label,\nrequired this.items,\nrequired this.onChanged,\nsuper.key,\nthis.validator,\nthis.value,\nthis.hint,\nthis.helper,\n});\nfinal String label;\nfinal String? hint;\nfinal String? helper;\nfinal List<Map<String, dynamic>> items;\nfinal String? Function(List<Map<String, dynamic>> item)? validator;\nfinal List? value;\nfinal Function(List<Map<String, dynamic>> values, List ids) onChanged;\n\n@override\nState<QSwitch> createState() => _QSwitchState();\n}\n\nclass _QSwitchState extends State<QSwitch> {\nList<Map<String, dynamic>> items = [];\n\n@override\nvoid initState() {\nsuper.initState();\nfor (final item in widget.items) {\nitems.add(Map.from(item));\n}\n}\n\n@override\nWidget build(BuildContext context) {\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: FormField(\ninitialValue: false,\nvalidator: (value) => widget.validator!(items),\nbuilder: (FormFieldState<bool> field) {\nreturn InputDecorator(\ndecoration: InputDecoration(\nlabelText: widget.label,\nerrorText: field.errorText,\nborder: InputBorder.none,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nchild: ListView.builder(\nshrinkWrap: true,\nitemCount: items.length,\nitemBuilder: (context, index) {\nfinal item = items[index];\n\nreturn Container(\nchild: Row(\nchildren: [\nExpanded(\nchild: Text(\"${item[\"label\"]}\"),\n),\nContainer(\nwidth: 80.0,\nchild: Transform.scale(\nscale: 0.7,\nalignment: Alignment.centerRight,\nchild: SwitchListTile(\ncontentPadding: const EdgeInsets.all(0),\n// title: Text(\"${item[\"label\"]}\"),\nvalue: item['checked'] ?? false,\nonChanged: (val) {\nitems[index]['checked'] = val;\nfield.didChange(true);\nsetState(() {});\n\nfinal selectedValues = items\n.where((i) => i['checked'] == true)\n.toList();\n\nfinal ids = selectedValues\n.map((e) => e['value'])\n.toList();\nwidget.onChanged(selectedValues, ids);\n},\n),\n),\n),\n],\n),\n);\n},\n),\n);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_text_field": {
    "prefix": "reuseable_text_field",
    "body": "import 'package:flutter/material.dart';\n\nclass QTextField extends StatefulWidget {\nconst QTextField({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.id,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\nthis.maxLength,\nthis.onSubmitted,\nthis.obscure = false,\nthis.enabled = true,\nthis.prefixIcon,\nthis.suffixIcon,\nthis.focusNode,\nthis.controller,\n});\nfinal String? id;\nfinal String label;\nfinal String? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal bool obscure;\nfinal bool enabled;\nfinal int? maxLength;\nfinal IconData? prefixIcon;\nfinal IconData? suffixIcon;\nfinal Function(String) onChanged;\nfinal Function(String)? onSubmitted;\nfinal TextEditingController? controller;\nfinal FocusNode? focusNode;\n\n@override\nState<QTextField> createState() => _QTextFieldState();\n}\n\nclass _QTextFieldState extends State<QTextField> {\nlate TextEditingController textEditingController;\nbool visible = false;\n\n@override\nvoid initState() {\nfocusNode = widget.focusNode ?? FocusNode();\ntextEditingController = widget.controller ?? TextEditingController();\ntextEditingController.text = widget.value ?? '';\nsuper.initState();\n}\n\nString getValue() {\nreturn textEditingController.text;\n}\n\nsetValue(value) {\ntextEditingController.text = value;\n}\n\nresetValue() {\ntextEditingController.text = '';\n}\n\nfocus() {\nfocusNode.requestFocus();\n}\n\nlate FocusNode focusNode;\n\n@override\nWidget build(BuildContext context) {\nWidget icon = Icon(\nwidget.suffixIcon ?? Icons.abc,\n);\n\nif (widget.obscure) {\nif (visible) {\nicon = InkWell(\nonTap: () {\nvisible = false;\nsetState(() {});\n},\nchild: icon = Icon(Icons.visibility),\n);\n} else {\nicon = InkWell(\nonTap: () {\nvisible = true;\nsetState(() {});\n},\nchild: icon = Icon(Icons.password),\n);\n}\n}\n\nreturn Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: TextFormField(\nenabled: widget.enabled,\ncontroller: textEditingController,\nfocusNode: focusNode,\nvalidator: widget.validator,\nmaxLength: widget.maxLength,\nobscureText: visible == false && widget.obscure,\ndecoration: InputDecoration(\nlabelText: widget.label,\nsuffixIcon: icon,\nhelperText: widget.helper,\nhintText: widget.hint,\n),\nonChanged: (value) {\nwidget.onChanged(value);\n},\nonFieldSubmitted: (value) {\nif (widget.onSubmitted != null) widget.onSubmitted!(value);\n},\n),\n);\n}\n}\n"
  },
  "reuseable_time_picker": {
    "prefix": "reuseable_time_picker",
    "body": "import 'package:flutter/material.dart';\n\nclass QTimePicker extends StatefulWidget {\nconst QTimePicker({\nrequired this.label,\nrequired this.onChanged,\nsuper.key,\nthis.value,\nthis.validator,\nthis.hint,\nthis.helper,\n});\nfinal String label;\nfinal TimeOfDay? value;\nfinal String? hint;\nfinal String? helper;\nfinal String? Function(String?)? validator;\nfinal Function(TimeOfDay?) onChanged;\n\n@override\nState<QTimePicker> createState() => _QTimePickerState();\n}\n\nclass _QTimePickerState extends State<QTimePicker> {\nTimeOfDay? selectedValue;\nlate TextEditingController controller;\n@override\nvoid initState() {\nsuper.initState();\nselectedValue = widget.value;\ncontroller = TextEditingController(\ntext: getInitialValue(),\n);\n}\n\nString getInitialValue() {\nif (widget.value != null) {\nfinal hh = widget.value?.hour.toString().padLeft(2, '0');\nfinal mm = widget.value?.minute.toString().padLeft(2, '0');\nreturn '$hh:$mm';\n}\nreturn '-';\n}\n\nString getFormattedValue() {\nif (selectedValue != null) {\nfinal hh = selectedValue?.hour.toString().padLeft(2, '0');\nfinal mm = selectedValue?.minute.toString().padLeft(2, '0');\nreturn '$hh:$mm';\n}\nreturn '-';\n}\n\n@override\nWidget build(BuildContext context) {\nreturn InkWell(\nfocusColor: Colors.transparent,\nhoverColor: Colors.transparent,\nhighlightColor: Colors.transparent,\nonTap: () async {\nfinal pickedTime = await showTimePicker(\ninitialTime: widget.value ?? TimeOfDay.now(),\ncontext: context,\nbuilder: (context, child) {\nreturn MediaQuery(\ndata:\nMediaQuery.of(context).copyWith(alwaysUse24HourFormat: true),\nchild: child ?? Container(),\n);\n},\n);\nprint('pickedTime: $pickedTime');\nselectedValue = pickedTime;\ncontroller.text = getFormattedValue();\nsetState(() {});\n\nwidget.onChanged(selectedValue);\n},\nchild: AbsorbPointer(\nchild: Container(\nmargin: const EdgeInsets.only(\nbottom: 12,\n),\nchild: TextFormField(\ncontroller: controller,\nvalidator: (value) {\nif (widget.validator != null) {\nreturn widget.validator!(selectedValue.toString());\n}\nreturn null;\n},\nreadOnly: true,\ndecoration: InputDecoration(\nlabelText: widget.label,\nlabelStyle: const TextStyle(\ncolor: Colors.blueGrey,\n),\nsuffixIcon: const Icon(\nIcons.timer,\n),\nhelperText: widget.helper,\nhintText: widget.hint,\n),\n),\n),\n),\n);\n}\n}\n"
  },
  "q_menu": {
    "prefix": "q_menu",
    "body": "QGridMenu(\nitems: [\n{\n\"label\": \"Product\",\n\"icon\": Icons.store,\n\"color\": Colors.red,\n\"view\": FavoriteView(),\n},\n{\n\"label\": \"Customer\",\n\"icon\": Icons.people,\n\"color\": Colors.green,\n\"view\": FavoriteView(),\n},\n{\n\"label\": \"Supplier\",\n\"icon\": Icons.emoji_people,\n\"color\": Colors.blue,\n\"view\": FavoriteView(),\n},\n{\n\"label\": \"User\",\n\"icon\": Icons.person,\n\"color\": Colors.grey,\n\"view\": FavoriteView(),\n},\n{\n\"label\": \"Report\",\n\"icon\": Icons.list_alt,\n\"color\": Colors.purple,\n\"view\": FavoriteView(),\n},\n{\n\"label\": \"Stock\",\n\"icon\": Icons.numbers,\n\"color\": Colors.orange,\n\"view\": FavoriteView(),\n},\n{\n\"label\": \"Export/Import\",\n\"icon\": Icons.import_contacts,\n\"color\": Colors.blueAccent,\n\"view\": FavoriteView(),\n},\n{\n\"label\": \"Backup/Restore\",\n\"icon\": Icons.backup,\n\"color\": Colors.pink,\n\"view\": FavoriteView(),\n}\n],\n),"
  },
  "reuseable_statistic": {
    "prefix": "reuseable_statistic",
    "body": "import 'package:flutter/material.dart';\nimport 'package:hyper_ui/core.dart';\n\nclass QStatistic extends StatelessWidget {\nconst QStatistic({\nrequired this.label,\nrequired this.value,\nrequired this.icon,\nsuper.key,\nthis.color,\n});\nfinal String label;\nfinal num value;\nfinal IconData icon;\nfinal Color? color;\n\n@override\nWidget build(BuildContext context) {\nreturn Card(\nchild: Container(\nwidth: MediaQuery.of(context).size.width,\npadding: const EdgeInsets.all(12),\nchild: Row(\nchildren: [\nExpanded(\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nText(\nlabel,\nstyle: const TextStyle(\nfontSize: 12,\n),\n),\nconst SizedBox(\nheight: 6,\n),\nText(\n'$value',\nstyle: const TextStyle(\nfontSize: 16,\nfontWeight: FontWeight.bold,\n),\n),\n],\n),\n),\nContainer(\npadding: const EdgeInsets.all(6),\ndecoration: BoxDecoration(\ncolor: color ?? primaryColor,\nborderRadius: const BorderRadius.all(\nRadius.circular(\n8,\n),\n),\n),\nchild: Icon(\nicon,\nsize: 16,\ncolor: Colors.white,\n),\n),\n],\n),\n),\n);\n}\n}\n"
  }
}